# Generated by Django 5.0 on 2024-01-07 06:34

import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment')),
            ],
        ),
        migrations.CreateModel(
            name='CommentDislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dislikes', to='api.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_title', models.CharField(max_length=255)),
                ('post_content', models.TextField()),
                ('post_images', models.TextField(blank=True, max_length=20000, null=True)),
                ('post_type', models.CharField(choices=[('Interview Experience', 'Interview Experience'), ('Technical Discussion', 'Technical Discussion'), ('Project Showcase', 'Project Showcase'), ('General Advice', 'General Advice'), ('Event Announcement', 'Event Announcement')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.post'),
        ),
        migrations.CreateModel(
            name='PostDislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dislikes', to='api.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_title', models.CharField(max_length=100)),
                ('question_link', models.CharField(max_length=255)),
                ('question_created', models.DateTimeField(auto_now_add=True)),
                ('question_updated', models.DateTimeField(auto_now=True)),
                ('question_description', models.TextField(blank=True, default='', null=True)),
                ('question_type', models.CharField(choices=[('Contest Question', 'Contest Question'), ('General Practice', 'General Practice'), ('Daily Challenge', 'Daily Challenge'), ('Interview Question', 'Interview Question')], max_length=100)),
                ('question_status', models.CharField(choices=[('Weak', 'Weak'), ('Average', 'Average'), ('Strong', 'Strong'), ('Very Strong', 'Very Strong')], max_length=100)),
                ('question_topics', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Array', 'Array'), ('String', 'String'), ('Linked List', 'Linked List'), ('Stack', 'Stack'), ('Queue', 'Queue'), ('Binary Tree', 'Binary Tree'), ('Binary Search Tree', 'Binary Search Tree'), ('Heap', 'Heap'), ('Graph', 'Graph'), ('Greedy', 'Greedy'), ('Backtracking', 'Backtracking'), ('Dynamic Programming', 'Dynamic Programming'), ('Bit Manipulation', 'Bit Manipulation'), ('Trie', 'Trie'), ('Hashing', 'Hashing'), ('Matrix', 'Matrix'), ('Searching', 'Searching'), ('Sorting', 'Sorting'), ('Recursion', 'Recursion'), ('Randomized', 'Randomized'), ('Divide and Conquer', 'Divide and Conquer'), ('Game Theory', 'Game Theory'), ('Branch and Bound', 'Branch and Bound'), ('Geometry', 'Geometry'), ('Mathematical', 'Mathematical'), ('Combinatorics', 'Combinatorics'), ('Bit Magic', 'Bit Magic'), ('All', 'All')], max_length=100), default=list, size=5)),
                ('question_author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions_author', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_approach', models.TextField()),
                ('solution_time_complexity', models.CharField(max_length=255)),
                ('solution_space_complexity', models.CharField(max_length=255)),
                ('solution_type', models.CharField(choices=[('Brute Force Solution', 'Brute Force Solution'), ('Optimized Solution', 'Optimized Solution'), ('Best Solution', 'Best Solution')], max_length=255)),
                ('code_snippets', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question')),
            ],
        ),
    ]
