# Generated by Django 5.0 on 2024-05-27 11:33

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0002_rename_question_solution_solution_question"),
    ]

    operations = [
        migrations.AlterField(
            model_name="question",
            name="question_topics",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    choices=[
                        ("Array", "Array"),
                        ("String", "String"),
                        ("Linked List", "LinkedList"),
                        ("Stack", "Stack"),
                        ("Queue", "Queue"),
                        ("Binary Tree", "BinaryTree"),
                        ("Binary Search Tree", "BinarySearchTree"),
                        ("Heap", "Heap"),
                        ("Graph", "Graph"),
                        ("Greedy", "Greedy"),
                        ("Backtracking", "Backtracking"),
                        ("Dynamic Programming", "DynamicProgramming"),
                        ("Bit Manipulation", "BitManipulation"),
                        ("Trie", "Trie"),
                        ("Hashing", "Hashing"),
                        ("Matrix", "Matrix"),
                        ("Searching", "Searching"),
                        ("Sorting", "Sorting"),
                        ("Recursion", "Recursion"),
                        ("Randomized", "Randomized"),
                        ("Divide and Conquer", "DivideAndConquer"),
                        ("Game Theory", "GameTheory"),
                        ("Branch and Bound", "BranchAndBound"),
                        ("Geometry", "Geometry"),
                        ("Mathematical", "Mathematical"),
                        ("Combinatorics", "Combinatorics"),
                        ("Bit Magic", "BitMagic"),
                        ("All", "All"),
                        ("Fenwick Tree", "FenwickTree"),
                        ("Segment Tree", "SegmentTree"),
                        ("Union Find", "UnionFind"),
                        ("Suffix Array", "SuffixArray"),
                        ("Suffix Tree", "SuffixTree"),
                        ("AVL Tree", "AVLTree"),
                        ("Red Black Tree", "RedBlackTree"),
                        ("B Tree", "BTree"),
                        ("K-D Tree", "KDTree"),
                        ("Skip List", "SkipList"),
                        ("Radix Tree", "RadixTree"),
                        ("LRU Cache", "LRUCache"),
                        ("Fibonacci Heap", "FibonacciHeap"),
                        ("Treap", "Treap"),
                        ("Sparse Table", "SparseTable"),
                        ("Number Theory", "NumberTheory"),
                        ("Modular Arithmetic", "ModularArithmetic"),
                        ("Fast Fourier Transform", "FastFourierTransform"),
                        ("Persistent Data Structures", "PersistentDataStructures"),
                        ("Mo's Algorithm", "MosAlgorithm"),
                        ("Heavy Light Decomposition", "HeavyLightDecomposition"),
                        ("Centroid Decomposition", "CentroidDecomposition"),
                        ("Euler Tour Technique", "EulerTourTechnique"),
                        ("Sweep Line Algorithm", "SweepLineAlgorithm"),
                        ("Line Algorithms", "LineAlgorithms"),
                        ("Matrix Exponentiation", "MatrixExponentiation"),
                        (
                            "Inclusion Exclusion Principle",
                            "InclusionExclusionPrinciple",
                        ),
                        ("Sieve Of Eratosthenes", "SieveOfEratosthenes"),
                        ("Matrix Chain Multiplication", "MatrixChainMultiplication"),
                        ("Meet In The Middle", "MeetInTheMiddle"),
                        ("Karatsuba Algorithm", "KaratsubaAlgorithm"),
                        ("Floyd Warshall", "FloydWarshall"),
                        ("Kadane's Algorithm", "KadanesAlgorithm"),
                        ("Kruskal's Algorithm", "KruskalsAlgorithm"),
                        ("Prim's Algorithm", "PrimsAlgorithm"),
                        ("Dijkstra's Algorithm", "DijkstrasAlgorithm"),
                        ("Bellman-Ford Algorithm", "BellmanFordAlgorithm"),
                        ("Tarjan's Algorithm", "TarjansAlgorithm"),
                        ("Kahn's Algorithm", "KahnsAlgorithm"),
                        ("A* Algorithm", "AStarAlgorithm"),
                        ("Boyer-Moore Algorithm", "BoyerMooreAlgorithm"),
                        ("KMP Algorithm", "KMPAlgorithm"),
                        ("Rabin-Karp Algorithm", "RabinKarpAlgorithm"),
                        ("Z Algorithm", "ZAlgorithm"),
                        ("Hopcroft-Karp Algorithm", "HopcroftKarpAlgorithm"),
                        ("Edmonds-Karp Algorithm", "EdmondsKarpAlgorithm"),
                        ("Dinic's Algorithm", "DinicsAlgorithm"),
                        ("Ford-Fulkerson Algorithm", "FordFulkersonAlgorithm"),
                        ("Hungarian Algorithm", "HungarianAlgorithm"),
                        ("Huffman Coding", "HuffmanCoding"),
                        ("Topological Sort", "TopologicalSort"),
                        ("Johnson's Algorithm", "JohnsonsAlgorithm"),
                    ],
                    max_length=100,
                ),
                default=list,
                size=10,
            ),
        ),
        migrations.AlterField(
            model_name="solution",
            name="solution_type",
            field=models.CharField(
                choices=[
                    ("Brute", "Brute"),
                    ("Optimized", "Optimized"),
                    ("Best", "Best"),
                ],
                max_length=255,
            ),
        ),
    ]
